#PODNAME: Phases
#ABSTRACT: Descriptiong of File::Dedupe's Phases
=head1 Phases

File::Dedupe's phases describe the places where you plug into and how.

=head2 Scan

Scan takes input items from configuration, scans those files and directories so
that at the end of the scan all items in the filesystem are described in the 
store and only those. 

Scan may include mechanisms to speed up the process by not repeating checksum 
scans on unchanged items.

 Phase name: scan
 Input: input items from active profile
 Output: writes/updates store

At this point no subphases are defined. But I might define some in the future.

=head2 Possible Subphases 

Either this is all one plugin or we have plugins calling plugins. So modularity
we better use different plugins.

 
=over 1

=item a) ScanMonitored (for all files)

Proposed new initial scan which determines only monitored files. Takes
input info from current profile and calls C<scan_compare> for each file it 
encounters. 

(We might want to keep track of encountered items for use in wipe. Should
that be on db or in memory? In memory we would just use a hash. If we store
that info in db, we would use a 'last_seen' column with date/time/epoch info.)

(Can the filelist and the store be the same structure? Yes! Seems like a waste 
to have two similar structures? Also, it seems better design to trigger 
comparison and scanner all in one walk thru.)

=item b) ScanCompare (for each file)

-if file not yet stored, it needs to be stored
-if file is already stored, but mtime changed, it needs to be stored again

=item c) ScanStore (for each file that needs to be updated in store)

Gets called from scan_compare for specific files which need storage. 
Describe the files and save description in store (db).

=item d) ScanWipe (for all items in db). 

Walk thru all the files in db check if they still exist on harddisk or as part 
of monitored directories. It would speed up things if we had access to filelist
from step scan_filelist.

With a last_seen column in the db, we would delete all items where last_seen is 
older than the last scan.

=back

=cut